Compile(input, line_number) Do
	Set flag <- 0 // Meet Char?
	Set count <- 0
	Set tmp <- ""
	Set code is a VECTOR

	For i <- 0 to LENGTH of input Do
		// Ignore Comment
		If input[i] is "." or "\n" Do
		{
			If flag is 1 Do // perious has a Char
				PUSH tmp to code
				tmp <- ""
				flag <- 0
			End If
			Break
		}
		// Ignore Witespace
		Else If input[i] is " " or "\t" then
		{
			If flag is 1 Do // perious has a Char
				PUSH tmp to code
				tmp <- ""
				flag <- 0
			End If
			Continue
		}
		// Store Char
		Else then
		{
			If flag is 0 Do // perious has no Char
				count <- count + 1
				flag <- 1
				tmp <- tmp + input[i]
		}
		End If
	End For

	// Store Last Word
	if flag is 1 Do
		PUSH tmp to code;
	End If

	// Statement
	Set statement is a MAP
	statement["line_number"] <- line_number
	statement["Label"] <- ""
	statement["Mnemoic"] <- ""
	statement["Operand"] <- ""
	statement["Addressing"] <- ""

	If size of code > 0 Do
		// If have no label
	End If

End Compile

Main Do
	Set is_start <- false
	Set input_line is a STRING
	Set line_number <- 1
	Set loc <- 0
	Set symTable is a MAP
	Set error_log is a MAP

	While has input Do
		Set input_line <- input
		Print line_number: input_line
		// START
		If find "START" in input_line Do
			Set is_start <- true
		End If

		// Compile and ignore empty line
		If is_start and length of input_line > 1 Do
			// [ Label, Mnemoic, Operand ]
			Set statement <- Compile(input_line, line_number)
			// Output Line NUmber and Loc
			Print "line_number: " statement["line_number"]
			Print "loc: " loc // hex number
			// END Program
			If statement["Label"] is "END" Do
			{
				Set is_start <- false
				Print "End of program."
				Break
			}
			// START from this line
			Else If statement["Mnemoic"] is "START" then
			{
				// Convert hex string to int, Set start position
				Set loc <- statement["Operand"]
				Print "Program name is " statement["Label"] .
				Print "Start from " statement["Operand"] .
			}
			// RESB
			Else If statement["Mnemoic"] is "RESB" then
			{
				Print "RESB is pesuDo instruction code."
				Set data_name <- statement["Label"]
				// Store data to Symbol Table If need
				store_sym() // FIXME
				Set byte <- statement["Operand"]
				Set loc <- loc + byte
			}
			// RESW
			Else If statement["Mnemoic"] is "RESW" then
			{
				Print "RESW is pesuDo instruction code."
				// Store data to Symbol Table If need
				store_sym() // FIXME
				Set word <- statement["Operand"]
				Set loc <- loc + word*3
			}
			// Other
			Else then
			{
				// Output Addressing Mode
				If statement["Addressing"] NOT empty then
				{
					Print "Addressing: " statement["Addressing"]
				}
				// Output Label, Mnemoic, Operand
				If NOT 
					(statement["Label"] is empty and
					statement["Mnemoic"] is empty and
					statement["Operand"] is empty)
				 Do
				{
					Print "Label: " statement["Label"]
					Print "Mnemoic: " statement["Mnemoic"]
					Print "Operand: " statement["Operand"]
					// Store data to Symbol Table if need
					store_sym() // FIXME
					Set loc <- loc + 3
				}
				End If
			}
			end If
		End If

		Set line_number <- line_number + 1
	End While

	// Output Symble Table
	Print "Symbol Table:"
	Set iter_s <- begin of symTable
	While iter_s NOT the _end of symTable Do
		Print data_name of symTable[iter_s]
		Print loc of symTable[iter_s]
		iter_s <- iter_s + 1
	End While
	
	// Output Error Log
	Print "Error log:"
	Set iter_e <- begin of error_log
	While iter_e NOT the _end of error_log Do
		Print data_name of error_log[iter_e]
		Print loc of error_log[iter_e]
		iter_e <- iter_e + 1
	End While

	Return

End Main
